package org.cubik.cle.aui.util;

// Copyright 2002 Combex, Inc. under the terms of the MIT X license
// found at http://www.opensource.org/licenses/mit-license.html ...............

import org.erights.e.elib.base.TypeDesc;
import org.erights.e.elib.prim.E;
import org.erights.e.elib.prim.StaticMaker;
import org.erights.e.elib.serial.PassByConstruction;
//import org.erights.e.elib.slot.Audition;
import org.erights.e.elib.slot.AuditWitness;
import org.erights.e.elib.slot.Auditor;
import org.erights.e.elib.tables.ConstList;
import org.erights.e.elib.tables.Selfless;

/**
 * A type description object like that generated by <code>interface</code>
 * expressions, but that is Selfless, so that it is equal to identical
 * but separately created instances.
 */
public class NamedProtocol extends TypeDesc implements PassByConstruction, Selfless {

    static private final StaticMaker maker =
      StaticMaker.make(NamedProtocol.class);

  public NamedProtocol(String docComment,
                       String optFQName,
                       ConstList supers,
                       ConstList auditors,
                       ConstList mTypes) {
    super(docComment, optFQName, supers, auditors, mTypes);
  }
  
  /** Make a NamedProtocol from a TypeDesc or anything that behaves like one. */
  static public NamedProtocol run(Object desc) {
    return (NamedProtocol)E.call(maker, "run",
      E.call(desc, "getDocComment"),
      E.call(desc, "getFQName"),
      E.call(desc, "getSupers"),
      E.call(desc, "getAuditors"),
      E.call(E.call(desc, "getMessageTypes"), "getValues"));
  }

  public Object[] getSpreadUncall() {
    Object[] result = {maker, "run", getDocComment(), getFQName(), getSupers(), getAuditors(), getMessageTypes().getValues()};
    return result;
  }

  protected Auditor getAuditor() { return this; }

  /**
   * Used in a type's role as rubber-stamping auditor.
   */
  public boolean audit(Object obj, AuditWitness witness) { return true; }

  /**
   * Used in a type's role as rubber-stamping auditor.
   */
  //public boolean audit(Audition audition) { return true; }
}
