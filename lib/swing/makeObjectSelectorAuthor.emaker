# Copyright 2006 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

# originally from Den, stripped down

pragma.syntax("0.8")
pragma.enable("anon-lambda")
pragma.enable("verb-curry")

def <aui> := <import>[{def mqn := meta.context().getFQNPrefix().split("$")[0].split(".")
                       ".".rjoin(mqn(0, mqn.size() - 2)) + ".*"}]
def <awt>                    := <import:java.awt.*>
def <swing>                  := <import:javax.swing.*>
def action                   := <aui:swing.action>

def borderFactory            := <swing:makeBorderFactory>
def JPanel__quasiParser      := <import:org.erights.ex.swing.JPanel__quasiParser>
def setupComponentReactor    := <aui:swing.setupComponentReactor>
def toKey                    := <elib:tables.makeTraversalKey>
def makeJLabel               := <swing:makeJLabel>
def [=> one, => zero] | _    := <aui:data.zeroOneMany>

def markerIcon := <swing:makeImageIcon>(<resource:org/cubik/cle/aui/swing/slot-target.gif>)

def makeObjectSelectorAuthor(awtDropTarget) :any {
  def makeObjectSelector(zoSlot, context) :any {
    
    def hole := JPanel``
        
    def updateSel(_) :void {
      def current := zoSlot.getValue()
      #throw <- (`updateSel entry, got $current`)
      hole.removeAll()
      if (current.__respondsTo("getValue", 0)) { # XXX should use One guard
        def object := current.getValue()
        hole."add(Component)"(context.subPresent(object, true))
      }
      hole.revalidate()
      hole.repaint(hole.getVisibleRect()) # *sigh*, why is this necessary?
      #throw <- (`updateSel exit ${hole.getComponents()}`)
    }
    
    setupComponentReactor(hole, zoSlot, updateSel, null)
    
    def marker := makeJLabel("")
    marker.setIcon(markerIcon)

    def outer := context.kit().dropTarget(def dropHandler(obj, _) :void {
      zoSlot.setValue(one(obj)) 
    })
    outer."add(Component)"(JPanel`$hole.X.Y $marker
                                  V         ${JPanel``}`)
    outer
  }
}