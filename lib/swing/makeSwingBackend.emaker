# Copyright 2006 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

pragma.enable("easy-return")
pragma.disable("explicit-result-guard")

pragma.enable("anon-lambda")

def <aui> := <import>[{def mqn := meta.context().getFQNPrefix().split("$")[0].split(".")
                       ".".rjoin(mqn(0, mqn.size() - 2)) + ".*"}]
def <awt>                    := <import:java.awt.*>
def <swing>                  := <import:javax.swing.*>


def JPanel__quasiParser      := <import:org.erights.ex.swing.JPanel__quasiParser>
def makePresentationContext  := <aui:present.makePresentationContext>
def presentCommandRun        := <aui:present.presentCommandRun>

def dumpComponents(c, out) {
  out.lnPrint(c.__getAllegedType())
  def nest := out.indent()
  for d in c.getComponents() {
    dumpComponents(d, nest)
  }
  nest.close()
}

def makeSwingBackend(<unsafeAwt>, <unsafeSwing>, defaultPresentGeneral, defaultPresentIcon, [=> makeFlexArgCommand, => CommandMessageDesc, => SimpleMessageCommand, => gatherCommands, => CompleteCommand] | _, stdout) {
  def backend
  def action := <aui:swing.action>
  def awtDropTarget := <unsafeAwt:dnd.makeDropTarget>
  def borderFactory := <swing:makeBorderFactory>
  def makeColor := <awt:makeColor>
  def makeJFrame := <unsafeSwing:makeJFrame>
  def makeJLabel := <swing:makeJLabel>
  def makeImageIcon := <swing:makeImageIcon>
  def makeObjectSelector := <aui:swing.makeObjectSelectorAuthor>(awtDropTarget)
  def swingConstants := <swing:makeSwingConstants>
  def dragDropKit := <import:com.skyhunter.e.awt.dnd.dragDropKit>(<unsafeAwt>, def _(_) {})
  def attachContextMenu := <aui:swing.attachContextMenu>
  def VK_ENTER := <awt:event.makeKeyEvent>.getVK_ENTER()
  def makeJTextField := <swing:makeJTextField>
  def makeJPopupMenu := <swing:makeJPopupMenu>
  def toolkit := <unsafeAwt:makeToolkit>.getDefaultToolkit()
  
  def menuPresentKit {
    to button(name :String, actionThunk) {
      def component := <swing:makeJMenuItem>(name)
      action(component, actionThunk)
      return component
    }
  }
  
  def iconPresentKit {
    to image(resource) {
      return makeImageIcon(resource)
    }
  }
  
  # XXX this is generic and doesn't belong in the backend
  def runToWindow(title, command, originC) {
    backend.openFrame(title, 
                      presentCommandRun(backend.getRootContext(), 
                                        command.run()),
                      originC)
  }
  
  # XXX this is generic and doesn't belong in the backend
  def presentAMCommand(command :CompleteCommand, context, selected) {
    def [commandLabel, resultLabelTh] := switch ([command.getCommand(), command.getArgs()]) {
      match [sc :SimpleMessageCommand ? (sc.getRecipient() == selected), []] {
        def verb := sc.getVerb()
        [verb,
         thunk { `$selected.$verb()` }]
      }
      match [subCmd, [==selected]] {
        [E.toQuote(subCmd),
         thunk { `$subCmd($selected)` }]
      }
      match [makeCmd :SimpleMessageCommand ? (makeCmd.getRecipient() == makeFlexArgCommand && makeCmd.getMessageDesc().getVerb() == "empty"), [subCmd :SimpleMessageCommand]] {
        # XXX present subCmd instead?
        def md := subCmd.getMessageDesc()
        def verb := md.getVerb()
        def arity := md.getParams().size()
        [verb + "." * (2 + arity),
         thunk { `$selected.$verb/$arity` }]
      }
      match _ {
        [def s := E.toQuote(command), thunk { s }]
      }
    }
  
    def mi := context.kit().button(commandLabel, thunk {
      runToWindow(resultLabelTh(), command, mi)
    })
  
    return mi
  }
  
  def addStandardEventHandlers(component, object, outerContext) {
    dragDropKit.setupLocalDragSource(component, thunk { object })
    outerContext <- getHooks() <- get("addListeners") <- (component) # XXX this should not be deferred, but we have a cyclic dependency
  
    attachContextMenu(component, thunk {
      def m := makeJPopupMenu()
      def menuContext := makePresentationContext(fn _,_,c {[c,[].asMap()]}, Ref.broken("no generic present"), [].asSet(), false, [].asMap(), menuPresentKit)
      
      when (gatherCommands(object)) -> doCommandMenu(commands) {
        for command in commands {
          m."add(Component)"(presentAMCommand(command, menuContext, object))
        }
  
        m.addPopupMenuListener(outerContext.getHooks()["borderControlListener"])
  
        return m
      } catch p {
        toolkit.beep() # besides the tracelog
        throw <- (p)
        return m
      }
    })
  }
  
  def presentKit {
    to failedPresent(object, problem) {
      # XXX this probably should not be in the kit at all, but a private provision to the presentation context
      # XXX need to decide on a presentation for broken refs, that is distinct from this
      # XXX make this look more internal-errorish. cf Squeak morph-drawing-error-morph
      def label := presentKit.text(`Presenter: $problem`)
      label.setBorder(borderFactory.createLineBorder(makeColor.getRed()))
      return label
    }
  
    /** XXX what does this name mean? */
    to plabel(name :String, optIconPresenter, context, object, getDoubleClickCommand) {
    
      def iconContext := makePresentationContext(fn _,_,c {[c,[].asMap()]}, defaultPresentIcon, [].asSet(), false, [].asMap(), iconPresentKit)
      def icon := if (optIconPresenter != null) {
        iconContext.subPresentType(object, optIconPresenter, false)
      } else { 
        iconContext.subPresent(object, false)
      }
    
      # XXX object arg shouldn't be present; instead the context should be asked to install these things
      def label := makeJLabel(name, icon, swingConstants.getLEADING())
      
      addStandardEventHandlers(label, object, context)
      
      label.addMouseListener(def doubleClickListener {
        to mouseReleased(e) { try {
          if (e.getClickCount() == 2) {
            def command := getDoubleClickCommand()
            runToWindow(E.toString(command), command, label)
          }
        } catch p { throw <- (p) } }
        match _ {}
      })
      
      return label
    }
    
    to button(name :String, actionThunk) {
      def component := <swing:makeJButton>(name)
      action(component, actionThunk)
      return component
    }

    /** XXX this ought to not exist here */
    to getObjectSelectorPresenter() { return makeObjectSelector }

    to text(s :String) {
      return makeJLabel(s)
    }

    to _textLineCommandField(handler) {
      def field := makeJTextField()
      field.addKeyListener(def enterKeyListener {
        to keyPressed(e) :void { try {
          if (e.getKeyCode() == VK_ENTER) {
            handler <- (field.getText())
            field.setText("")
          }
        } catch p { throw <- (p) } }
        match _ {}
      })
      return field
    }

    #match [dn ? via (["x" => 0, "y" => 1].fetch) dir, components]
    match [dn ? (["x" => 0, "y" => 1] =~ [(dn) => dir]|_), components] {
      def box := <swing:makeBox>(dir)
      for c in components { 
        box."add(Component)"(c) 
      }
      box
    }
  }

  def normalBorder := borderFactory.createEmptyBorder(2, 2, 2, 2)
  def boundaryBorder := borderFactory.createRaisedBevelBorder()
  def activeBorder := borderFactory.createBevelBorder(
    { #<swing:border.BevelBorder>.getRAISED() -- XXX erroneously unsafe
      0 },
    makeColor."run(float, float, float)"(0.7, 0.7, 1.0),
    makeColor."run(float, float, float)"(0.4, 0.4, 0.7))

  def makeSwingBoundary(object, context, content) {
    def container := JPanel`$content`
  
    addStandardEventHandlers(container, object, context)
  
  
    var mouseover := [].asSet()
    var active := false
  
    def updateBorder() {
      container.setBorder(
        if (active) { activeBorder } else if (mouseover.size() > 0) { boundaryBorder } else { normalBorder } )
    }
    updateBorder()
  
    
    
    def addListeners(c) {
      c.addMouseListener(def mouseOverUpdateListener {
      to mouseEntered(event) :void { try {
        mouseover with= mouseOverUpdateListener
        updateBorder()
        if (false) {
          dumpComponents(c, stdout)
          stdout.println()
        }
      } catch p { throw <- (p) } }
      to mouseExited(event) :void { try {
        mouseover without= mouseOverUpdateListener
        updateBorder()
      } catch p { throw <- (p) } }
      match _ {}
    })
    }
    addListeners(container)
  
    def borderControlListener { # XXX this needs renaming now
      to popupMenuWillBecomeInvisible(e) { try { 
        active := false
        updateBorder()
      } catch p { throw <- (p) } }
      to popupMenuWillBecomeVisible(e) { try {
        active := true
        updateBorder()
      } catch p { throw <- (p) } }
      match msg {}
    }
  
    return [container, [=> borderControlListener, => addListeners]]
  }

  def rootContext := makePresentationContext(makeSwingBoundary, defaultPresentGeneral, [].asSet(), true, Ref.broken("no hooks"), presentKit)

  return bind backend {
    to getRootContext() { return rootContext }
    to getPresentKit() { return presentKit }
    /** XXX decide whether "Frame" name is to stay */
    to openFrame(title, component, optRel) {
      def frame := makeJFrame(title)
    
      def sp := <swing:makeJScrollPane>()
        #sp.setPreferredSize(<awt:Dimension>(320,320))
        #sp.setVerticalScrollBarPolicy(<swing:ScrollPaneConstants>.getVERTICAL_SCROLLBAR_ALWAYS())
      sp.getViewport()."add(Component)"(component)
    
      frame.setContentPane(sp)
      frame.pack()
      if (optRel != null) { 
        frame.setLocationRelativeTo(optRel)
      } else {
        if (frame.__respondsTo("setLocationByPlatform", 1)) {
          frame.setLocationByPlatform(true)
        }
      }
      frame.show()
      return frame
    }
  }
}
