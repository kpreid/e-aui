# Copyright 2006 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

pragma.enable("easy-return")
pragma.disable("explicit-result-guard")

pragma.enable("accumulator")
pragma.enable("verb-curry")
pragma.enable("easy-when")
pragma.enable("anon-lambda")

def <aui> := <import>[{def mqn := meta.context().getFQNPrefix().split("$")[0].split(".")
                       ".".rjoin(mqn(0, mqn.size() - 2)) + ".*"}]

def CommandMessageDesc := <type:org.erights.e.elib.base.MessageDesc> # XXX should be just DeepFrozen and an interface
def makeLamportSlot := <import:org.erights.e.elib.slot.makeLamportSlot>
def EverReporter := <type:org.erights.e.elib.slot.EverReporter>
def makeStoneCast := <import:org.erights.e.facet.makeStoneCast>
def whenever := <elib:slot.whenever>

def Command                  := <aui:command.Command>
def CompleteCommand          := <aui:command.CompleteCommand>

def [=> Zero, => One, => Many,
     => zero, => one, => many,
     => ZOM, => ZO] := <aui:data.zeroOneMany>

interface TypedReporterSlot extends EverReporter {
  # XXX is it appropriate to duplicate the extends' method info here?
  to valueType() :ValueGuard
}

/** make something like a LamportSlot except that it publishes a guard and does not allow itself to be subscribed to a reporter. will not coerce values arriving from upstream. */
def makeTypedReporterSlot(slot, Value) {
  return def typedReporterSlot extends makeStoneCast(slot, EverReporter) {
    to setValue(new) { slot.setValue(Value.coerce(new, null)) }
    to valueType() { return Value }
  }
}

def makeZeroSlots(params) { 
  return accum [] for pd in params { 
    _.with(makeTypedReporterSlot(makeLamportSlot(zero), ZOM[if (pd.getOptGuard() != null) { pd.getOptGuard() } else { any }]))
  }
}

interface SimpleMessageCommand guards SimpleMessageCommandStamp {}
def makeSimpleMessageCommand(recipient :any, verb :any, args :List[any]) {
  return def simpleMessageCommand implements Command, CompleteCommand, SimpleMessageCommandStamp {
    to getRecipient() { return recipient }
    to getVerb() { return verb }
    to getArgs() { return args }
    to "&available"() { return &true }
    to snapshot() { return simpleMessageCommand }
    to run() { return [E.send(recipient, verb, args), null] }
  }
}

interface FlexArgMessageCommand guards FlexArgMessageCommandStamp {}
def makeFlexArgMessageCommand {
  to run(recipient :any, messageDesc :CommandMessageDesc, argZoSlots :List) {
    require(messageDesc.getParams().size() == argZoSlots.size())
    
    def &available := whenever(argZoSlots, thunk {
      escape e {
        for slot in argZoSlots { if (slot.getValue() !~ o :One) { e(false) } }
        true
      }
    })
    
    return def flexArgMessageCommand implements Command, FlexArgMessageCommandStamp {
      to getRecipient() { return recipient }
      to getVerb() { return messageDesc.getVerb() }
      to getParams() { return messageDesc.getParams() }
      to getArgZoSlots() { return argZoSlots }
      to run() {
        return flexArgMessageCommand.snapshot(null).run()
      }
      to "&available"() { return &available }
      to snapshot(partialEj) {
        return makeSimpleMessageCommand(recipient, messageDesc.getVerb(), accum [] for s in argZoSlots { _.with(
          switch (s.getValue()) {
            match one :One { one.getValue() }
            match _        { throw.eject(partialEj, "incomplete command") }
          }) })
      }
    }
  }
  to empty(r, d :CommandMessageDesc) {
    return makeFlexArgMessageCommand(r, d, makeZeroSlots(d.getParams()))
  }
}

def makeArglessMessageCommand(recipient :any, messageDesc :CommandMessageDesc) {
  return if (messageDesc.getParams().size() > 0) {
    makeSimpleMessageCommand(makeFlexArgMessageCommand, "empty", [recipient, messageDesc])
  } else {
    makeSimpleMessageCommand(recipient, messageDesc.getVerb(), [])
  }
}

[=> SimpleMessageCommand,
 => makeSimpleMessageCommand,
 => FlexArgMessageCommand,
 => makeFlexArgMessageCommand,
 => makeArglessMessageCommand,
 => CommandMessageDesc,
]