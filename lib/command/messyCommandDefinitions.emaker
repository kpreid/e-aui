# Copyright 2006 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

pragma.syntax("0.9")
pragma.enable("accumulator")

def <aui> := <import>[{def mqn := meta.context().getFQNPrefix().split("$")[0].split(".")
                       ".".rjoin(mqn(0, mqn.size() - 2)) + ".*"}]

def CommandMessageDesc := <type:org.erights.e.elib.base.MessageDesc> # XXX should be just DeepFrozen and an interface
def makeLamportSlot := <import:org.erights.e.elib.slot.makeLamportSlot>
def whenever := <elib:slot.whenever>

def Command                  := <aui:command.Command>
def messageDescForCommand    := <aui:command.messageDescForCommand>
def makeTypedReporterSlot    := <aui:data.makeTypedReporterSlot>

def [=> Zero, => One, => Many,
     => zero, => one, => many,
     => ZOM, => ZO] := <aui:data.zeroOneMany>

def makeZeroSlots(params) { 
  return accum [] for pd in params { 
    _.with(makeTypedReporterSlot(makeLamportSlot(zero), ZOM[if (pd.getOptGuard() != null) { pd.getOptGuard() } else { any }]))
  }
}

interface SimpleMessageCommand guards SimpleMessageCommandStamp {}
def makeSimpleMessageCommand {
  to run(recipient :any, messageDesc :CommandMessageDesc) {
    def arity := messageDesc.getParams().size()
    def Presenter := any # XXX restrict
    return def simpleMessageCommand \
        implements Command, SimpleMessageCommandStamp {
      to __printOn(out :TextWriter) {
        out.quote(recipient)
        out.write(" <- ")
        out.print(messageDesc.getVerb())
      }
      
      to getRecipient() { return recipient }
      to getMessageDesc() { return messageDesc }
      to getVerb() { return messageDesc.getVerb() }
      
      # XXX should &available check compatibility of args? should run coerce?
      to "&available"(_) { return &true }
      
      match [=="__getAllegedType", []] {
        __makeProtocolDesc("", "_", [], [], 
          [__makeMessageDesc(messageDesc.getDocComment(), 
                             "run", 
                             messageDesc.getParams(),
                             Tuple[if (messageDesc.getOptResultGuard() =~ g :notNull) {g} else {any}, nullOk[Presenter]])])
      }
      match [=="__respondsTo", [verb, queryArity]] {
        verb == "run" && queryArity == arity
      }
      match [`run`, args ? (args.size() == arity)] { 
        [E.send(recipient, messageDesc.getVerb(), args), null]
      }
      
      match msg { throw(`No such method: $msg`) }
    }
  }
  to extract(r :any, v :String, a :int) {
    return makeSimpleMessageCommand(r, r.__getAllegedType().getMessageTypes()[`$v/$a`])
  }
}

interface CompleteCommand guards CompleteCommandStamp {}
def makeCompleteCommand {
  to run(subCommand :Command, args :List) {
    return def completeCommand implements Command, CompleteCommandStamp {
      to getCommand() { return subCommand }
      to getArgs() { return args }
      to run() {
        return E.call(subCommand, "run", args)
      }
      to "&available"([]) { return subCommand."&available"(args) }
    }
  }
}

interface FlexArgCommand guards FlexArgCommandStamp {}
def makeFlexArgCommand {
  to run(subCommand :Command, argZoSlots :List) {
    #require(subCommand.__respondsTo("run", argZoSlots.size())
    
    def availableSlot
    
    def flexArgCommand implements Command, FlexArgCommandStamp {
      to getCommand() { return subCommand }
      to getArgZoSlots() { return argZoSlots }
      to run() {
        return flexArgCommand.snapshot(null).run()
      }
      to "&available"([]) { return availableSlot }
      to snapshot(partialEj) {
        return makeCompleteCommand(subCommand, accum [] for s in argZoSlots { _.with(
          switch (s.getValue()) {
            match one :One { one.getValue() }
            match _        { throw.eject(partialEj, "incomplete command") }
          }) })
      }
    }

    bind availableSlot := whenever.dynamic(argZoSlots, fn {
      escape ret {
        def &sub := flexArgCommand \
                      .snapshot(fn _ { ret([false, []]) }) \
                      ."&available"([])
        [sub, [&sub]]
      }
    })
    
    return flexArgCommand
  }
  to empty(c) {
    return makeFlexArgCommand(c, makeZeroSlots(messageDescForCommand(c).getParams()))
  }
}

def makeArglessMessageCommand(recipient :any, messageDesc :CommandMessageDesc) {
  return if (messageDesc.getParams().size() > 0) {
    makeCompleteCommand(makeSimpleMessageCommand.extract(makeFlexArgCommand, "empty", 1), [makeSimpleMessageCommand(recipient, messageDesc)])
  } else {
    makeCompleteCommand(makeSimpleMessageCommand(recipient, messageDesc), [])
  }
}

[=> SimpleMessageCommand,
 => makeSimpleMessageCommand,
 => CompleteCommand,
 => makeCompleteCommand,
 => FlexArgCommand,
 => makeFlexArgCommand,
 => makeArglessMessageCommand,
 => CommandMessageDesc,
]