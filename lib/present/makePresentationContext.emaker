# Copyright 2006 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

pragma.syntax("0.9")

def toKey                    := <elib:tables.makeTraversalKey>

def makePresentationContext(::"delegate", present, seen, quoting, kit, privateBox, privateBrand) {
  
  return def presentationContext {
    to __optSealedDispatch(brand) { return switch (brand) {
      match ==privateBrand { privateBox }
      match _ { null }
    }}
    
    to quoting() { return quoting }
    to kit() { return kit }
    
    to subPresent(object, quoting) {
      return presentationContext.subPresentType(object, present, quoting)
    }
    
    to subPresentType(object, type, quoting) {
      def handleFailure(f) {
        return try { f() } catch problem { throw <- (problem); kit.failedPresent(object, problem) }
      }
    
      def key := toKey(object)
      def subC
      def subPrivateBox := ::"delegate".newContext(object, subC)
      bind subC := makePresentationContext(
        ::"delegate",
        present,
        seen.with(key),
        quoting,
        kit,
        subPrivateBox,
        privateBrand)
      def c := ::"delegate".boundary(object, subC, if (seen.contains(key)) {
        handleFailure(fn { present("CYCLE", subC) })
      } else {
        handleFailure(fn { type(object, subC) })
      })
      return c
    }
  }
}
