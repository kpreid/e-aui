# Copyright 2006 Kevin Reid, under the terms of the MIT X license
# found at http://www.opensource.org/licenses/mit-license.html ................

pragma.syntax("0.9")
pragma.enable("accumulator")

def <aui> := <import>[{def mqn := meta.context().getFQNPrefix().split("$")[0].split(".")
                       ".".rjoin(mqn(0, mqn.size() - 2)) + ".*"}]

def <awt>                    := <import:java.awt.*>
def <swing>                  := <import:javax.swing.*>
def makeFollower             := <aui:data.makeFollower>
def limitText                := <aui:data.limitText>
def Command                  := <aui:command.Command>
def messageDescForCommand    := <aui:command.messageDescForCommand>
#def makeLamportSlot          := <import:org.erights.e.elib.slot.makeLamportSlot>
def FinalSlot                := <type:org.erights.e.elib.slot.FinalSlot>
def JPanel__quasiParser      := <import:org.erights.ex.swing.JPanel__quasiParser>
def Slot                     := <type:org.erights.e.elib.slot.Slot>
def presentCommandRun        := <aui:present.presentCommandRun>
def presentEverReporter      := <aui:present.presentEverReporter>
def setupComponentReactor    := <aui:swing.setupComponentReactor>
def makeGridBagTable         := <aui:swing.makeGridBagTable>
def gbc                      := <awt:makeGridBagConstraints>
def makeInsets               := <awt:makeInsets>
def makeBox                  := <swing:makeBox>
def makeFlowLayout           := <awt:makeFlowLayout>
def makeTextWriter           := <elib:oldeio.makeTextWriter>
def [=> Zero, => One, => Many,
     => zero, => one, => many,
     => ZOM, => ZO] := <aui:data.zeroOneMany>

def contentTextLimit := 60

#def presentGenericInSwing(object, context) {
#  def quoted := context.quoting()
#
#  def computeText() {
#    def t := if (quoted) {E.toQuote(object)} else {E.toString(object)}
#    return limitText(t)
#  }
#
#  def label := context.kit().plabel(computeText(), null, context, object, fn {fn {[null,null]}})
#
#  def update() { label.setText(computeText()) }
#  
#  if (!Ref.isResolved(object)) {
#    Ref.whenResolved(object, def done(_) :void {
#      update()
#    })
#  }
#  update()
#
#  label.addMouseListener(def mouseOverUpdateListener {
#    to mouseEntered(event) :void {
#      try {
#        update()
#      } catch problem {
#        throw <- (problem) # reach tracelog
#      }
#    }
#    match _ {}
#  })
#  
#  return label
#}

def presentGeneric(object, context) {
  def flow := kit.flow()
  
  def rebuild() {
    flow.removeAll()

    def prod() {
      flow.revalidate()
      flow.repaint(flow.getVisibleRect())
    }

    def [fallbackTextWriter, buffer] := makeTextWriter.makeBufferingPair()
    
    def flushFallback() {
      if (buffer.size().aboveZero()) {
        # XXX allow for word breaks and newlines
        flow."add(Component)"(context.kit().plabel(limitText(buffer.snapshot()), null, fn {fn {[null, null]}}))
        prod()
        buffer.delete(0, buffer.size())
      }
    }
    
    def presentationWriter {
      to __conformTo(guard) { return switch (guard) {
        match ==TextWriter { fallbackTextWriter }
        match _ { presentationWriter }
      }}
      
      to write(s :String) {
        fallbackTextWriter.print(s)
      }
      to print(obj) {
        if (obj =~ s :String ? (s == obj)) {
          fallbackTextWriter.print(s)
        } else {
          flushFallback()
          flow."add(Component)"(context.subPresent(obj, false))
          prod()
        }
      }
      to quote(obj) {
        flushFallback()
        flow."add(Component)"(context.subPresent(obj, true))
        prod()
      }
      to println(obj) {
        flushFallback()
        presentationWriter.print(obj) # XXX line break
      }
      to lnPrint(obj) {
        flushFallback()
        presentationWriter.print(obj) # XXX line break
      }
      
      match [=="print", objs] { for obj in objs { presentationWriter.print(obj) }}
      match [=="quote", objs] { for obj in objs { presentationWriter.quote(obj) }}
    }
    
    when (def r := object <- __printOn(presentationWriter)) -> {
      flushFallback()
    } catch p {
      flow."add(Component)"(context.subPresent(Ref.broken(p))) # XXX appropriate marking needed
    }
  }
  
  rebuild()

  if (!Ref.isResolved(object)) {
    Ref.whenResolved(object, def done(_) :void {
      rebuild()
    })
  }

  flow.addMouseListener(def mouseOverUpdateListener {
    to mouseEntered(_) :void {
      try {
        rebuild()
      } catch problem {
        throw <- (problem) # reach tracelog
      }
    }
    match _ {}
  })
  
  return flow
}

def presentSwitching(promise, context, after) {
  def placeholder := presentGeneric(promise, context)

  def hole := context.kit().x(placeholder)
  
  Ref.whenResolved(promise, def switchPresentation(_) {
    try {
      #throw <- (`resolved $promise`)
      hole.remove(placeholder)
      #throw <- (`removed placeholder, going to use $after`)
      def sp := try { # XXX this is the same structure as in presentationContext.subPresentType
        after(promise, context) :notNull
      } catch problem {
        context.kit().failedPresent(problem)
      }
      #throw <- (`about to add $sp for $promise, computed by $after`)
      hole."add(Component)"(sp)
      #throw <- (`replaced to $sp for $promise, components are`)
      #throw <- (`${hole.getComponents()}`)
      hole.revalidate()
    } catch p {
      throw <- (p)
    }
  })
  
  return hole
}

def presentTwine(object :Twine, context) {
  # XXX we need some sort of mechanism for indicating when not to truncate a string
  def t := if (context.quoting()) {E.toQuote(object)} else {E.toString(object)}
  def short := limitText(t, contentTextLimit)
  return context.kit().plabel(short, fn _,_ {null}, fn {fn {[null,null]}})
}

def presentListY(list, context) {
  def box := E.call(context.kit(), "y", accum [] for item in list { _.with(context.subPresent(item, context.quoting())) })
  return box
}

def presentMapY(map, context) {
  def table := makeGridBagTable()
  def tableC := table.getComponent()
  
  var i := 0
  for key => value in map { 
    #println(`$key $value`)
    def keyC := context.subPresent(key, context.quoting())
    def valueC := context.subPresent(value, context.quoting())
    tableC.add(
        keyC,
        gbc(
          0, i, # x/y
          1, 1,   # width/height
          1, 1,   # weight
          gbc.getEAST(), # anchor
          gbc.getVERTICAL(),   # fill
          makeInsets(0, 0, 0, 0), # insets
          0, 0    # ipad
        )
      )
    tableC.add(
        valueC,
        gbc(
          1, i, # x/y
          1, 1,   # width/height
          1, 1,   # weight
          gbc.getWEST(), # anchor
          gbc.getBOTH(),   # fill
          makeInsets(0, 0, 0, 0), # insets
          0, 0    # ipad
        )
      )
    table.addRow(key, [keyC, valueC]) 
    i += 1
  }
  return tableC
}

def presentFlexList(flexList, context) {
  # Operations to directly (through interaction) support
  #   put (replacement)
  #   insert
  #   append
  #   snapshot/diverge/asKeys/asSet/etc? or will command menus do?
  # Handle Very Large lists gracefully (e.g. "...", and providing search-y operations, indexOf, jumping to view an index, etc.)
  # Handle updating: refresh on mouseover, recognize when most items are similar, ...
  
  # For now, this is correct iff nothing else modifies the list.
  
  def kit := context.kit()
  def box := kit.y()
  
  def refresh() {
    box.removeAll()
    for i :int => _ in flexList {
      def entryFacet {
        to delete() { 
          refresh <- ()
          flexList.replace(i, i + 1, [], 0, 0)
        }
        to getValue() { return one(flexList[i]) }
        to setValue(new) { 
          refresh <- ()
          flexList[i] := (new :One).getValue()
        }
        to whenUpdated(reactor) { 
          # throw <- ("whenUpdated for FlexList facets not yet implemented")
          reactor <- reactToUpdate(entryFacet.getValue(), 0, null)
        }
      }
      box."add(Component)"(kit.dropTarget(def insert(new, _) { 
        refresh <- ()
        flexList.insert(i, new)
      }))
      box."add(Component)"(context.subPresentType(entryFacet, kit.getObjectSelectorPresenter(), false))
      
    }
    box."add(Component)"(kit.dropTarget(def push(new, _) { 
      refresh <- ()
      flexList.push(new)
    }))
  }

  refresh()
  
  return box
}

def presentFlexSet(flexSet, context) {
  # XXX add mouseover refreshes/refresh button/timer. XXX we need a general UI convention for no-notification-possible refreshes.
  
  def kit := context.kit()
  def box := kit.y()
  
  def itemToIndex := [].asMap().diverge()
  
  def refresh
  
  box."add(Component)"(kit.dropTarget(def addElement(new, _) { 
    refresh <- ()
    flexSet.addElement(new)
  }))
  
  def insert(item) { 
    def newIndex := box.getComponentCount() - 1
    itemToIndex.put(item, newIndex, true)
    
  	def entryFacet {
      to delete() { 
        refresh <- ()
        flexSet.remove(item)
      }
      to getValue() { return item }
    }
    box."add(Component, int)"(
      context.subPresentType(entryFacet, fn _,c {c.subPresent(entryFacet.getValue(), context.quoting())}, false),
      newIndex)
    
    box.revalidate()
    box.repaint(box.getVisibleRect()) # *sigh*, why is this necessary?
  }
  
  if (flexSet.__respondsTo("getFuture", 0)) {
    def [now, then] := flexSet.getFuture()
    for item in now { insert(item) }
    makeFollower(then, def followTarget {
      to addAll(items) { for item in items { insert(item) } }
      to removeAll(items) { 
        for item in items {
          def index := itemToIndex[item]
          box.remove(index)
          itemToIndex.removeKey(item)
          for otherItem => otherIndex in itemToIndex {
            if (otherIndex > index) {
              itemToIndex[otherItem] := otherIndex - 1
            }
          }
        }
        box.revalidate()
        box.repaint(box.getVisibleRect())
      }
    }, [].asMap())
    bind refresh := fn {}

  } else {
    bind refresh() {
      itemToIndex.removeAll()
      box.removeAll()
      for item in flexSet { insert(item) }
    }

    refresh()
  }

  
  return box
}

def makeCompleteCommandUI(command :Command, editUI, context) {
  # require(messageDescForCommand(command).getParams().size() == 0)
  def hole := JPanel``
  hole.setLayout(makeFlowLayout())
  hole.setPreferredSize(<awt:makeDimension>(320, 100))

  def runButton := context.kit().button("Run", fn {
    hole.setPreferredSize(null)
    hole."add(Component)"(presentCommandRun(context, command.run()))
    hole.revalidate()
  })
  
  # XXX support far commands?
  def &available := command."&available"([])
  
  def updateAvailable(available) {
    runButton.setEnabled(available)
  }
  
  if ((&available).__respondsTo("whenUpdated", 1)) {
    runButton.setEnabled(false)
    setupComponentReactor(runButton, &available, updateAvailable, null)
  } else {
    updateAvailable(available)
  }

  return JPanel`
    $editUI.X
    ${context.kit().x(JPanel``, runButton)}.X
    $hole.Y
  `
}

/** demo thing */
def presentMakeFlexMapCommandInSwing(command, context) {
  
  def [kzs, vzs] := command.getArgZoSlots()
  def ksel := context.subPresentType(kzs, context.kit().getObjectSelectorPresenter(), false)
  def vsel := context.subPresentType(vzs, context.kit().getObjectSelectorPresenter(), false)

  return makeCompleteCommandUI(command, JPanel`
    ${context.kit().text("Key type: ")}   $ksel.X
    ${context.kit().text("Value type: ")} $vsel.X
  `, context)
}

def presentFACommandInSwing(command, context) {
  def paramDescs := messageDescForCommand(command.getCommand()).getParams()

  def selsC := makeBox(1)
  for i => zos in command.getArgZoSlots() { 
    selsC."add(Component)"(JPanel`
      ${context.subPresent(paramDescs[i].getName(), false)} $\
        ${context.subPresentType(zos, context.kit().getObjectSelectorPresenter(), true)}.X $\
          ${context.subPresent(zos.valueType().valueType(), false)}
    `) 
  }

  def leftLabel := JPanel`${context.subPresent(command.getCommand(), true)}.X ${context.kit().text("(")}`

  return makeCompleteCommandUI(command, JPanel`
    $leftLabel $selsC.X ${context.kit().text(")")}
  `, context)
}

def presentSimpleMessageCommand(command, context) {
  # XXX should be able to present as a button by default, but do this when presented in the context of a flex-arg command template
  def kit := context.kit()
  return kit.x(context.subPresent(command.getRecipient(), true),
               kit.text(" <- "),
               context.subPresent(command.getVerb(), false))
}

def presentCompleteCommandInSwing(command, context) {
  return makeCompleteCommandUI(command, JPanel``, context)
}

def ENode := <type:org.erights.e.elang.evm.ENode>
def borderFactory := <swing:makeBorderFactory>
def makeColor := <awt:makeColor>
def blockBorder := borderFactory.createLineBorder(makeColor.getBlack())
def presentENode(node, context) {
  def kit := context.kit()
  def subp(n) {
    return context.subPresentType(n, presentENode, false)
  }
  def block(n) {
    # XXX Swing-specific
    def c := kit.x(n)
    c.setBorder(blockBorder)
    return c
    #return kit.x(kit.text("{ "), subp(n), kit.text(" }"))
  }
    
  return node.welcome(def pVisitor {
    to visitAssignExpr(_, l, r) {
        return kit.x(subp(l), kit.text(" := "), subp(r))
    }
    to visitCallExpr(_, r, v, a) {
        return E.call(kit, "x", [subp(r), kit.text("."), context.subPresent(v, false), kit.text("(")] + accum [] for arg in a { _.with(subp(arg)) } + [kit.text(")")])
    }
    to visitCatchExpr(_, body, catchPatt, catchBody) {
      return JPanel`${kit.text("try ")} ${block(subp(body))}.X.Y >
                    ${JPanel``}.Y          V                     V
                    ${kit.text("catch ")}  ${subp(catchPatt)} ${block(subp(catchBody))}.X.Y
                    ${JPanel``}.Y          >                  V`
    }
    to visitDefineExpr(expr, pattern, _, _) {
      if (expr.getOptEjectorExpr() != null) {
        return kit.x(kit.text("def "), subp(pattern), kit.text(" exit "), subp(expr.getOptEjectorExpr()), kit.text(" := "), subp(expr.getRValue()))
      } else {
        return kit.x(kit.text("def "), subp(pattern), kit.text(" := "), subp(expr.getRValue()))
      }
    }
    to visitEscapeExpr(_, ejPatt, body, catchPatt, catchBody) {
      if (catchPatt != null) {
        return JPanel`${kit.text("escape ")} ${subp(ejPatt)} ${block(subp(body))}.X.Y
                      ${JPanel``}.Y          >               V
                      ${kit.text("catch ")}  ${subp(catchPatt)} ${block(subp(catchBody))}.X.Y
                      ${JPanel``}.Y          >                  V`
      } else {
        return kit.x(kit.text("escape "), subp(ejPatt), block(subp(body)))
      }
    }
    to visitFinallyExpr(_, body, unwinder) {
      return JPanel`${kit.text("try ")}      ${block(subp(body))}.X.Y
                    ${JPanel``}.Y            V
                    ${kit.text("finally ")}  ${block(subp(unwinder))}.X.Y
                    ${JPanel``}.Y            V`
    }
    to visitIfExpr(_, test, then, els) {
        return JPanel`${kit.text("if ")} ${subp(test)} ${block(subp(then))}.X.Y
                      ${JPanel``}.Y          >         V
                      ${kit.text("else ")}   >         ${block(subp(els))}.X.Y
                      ${JPanel``}.Y          >         V`
    }
    to visitHideExpr(_, sub) {
      return block(subp(sub))
    }
    to visitLiteralExpr(_, value) {
      return context.subPresent(value, true)
    }
    to visitMetaContextExpr(_) {
      return kit.text("meta.context()")
    }
    to visitMetaStateExpr(_) {
      return kit.text("meta.getState()")
    }
    to visitNounExpr(_, noun) {
      return presentTwine(noun, context)
    }
    to visitObjectExpr(_, docComment, qualifiedName, auditors, script) {
      # XXX include docComment
      # XXX presenting auditor exprs should be via presentListX[presentENode]
      def audC := if (auditors.size() > 0) {
        JPanel`${kit.text(" implements ")} ${context.subPresent(auditors, false)}`
      } else { JPanel`` }
      
      return JPanel`${kit.text("def ")} ${context.subPresent(qualifiedName, true)} $audC.X
                    ${JPanel``}.Y ${subp(script)}.X.Y`
    }
    to visitSeqExpr(_, subs) {
      return E.call(kit, "y", accum [] for sub in subs { _.with(subp(sub)) })
    }
    to visitSlotExpr(_, nounExpr) {
      return kit.x(kit.text("&"), subp(nounExpr))
    }
    to visitCdrPattern(_, list, rest) {
      return kit.x(subp(list), kit.text(" + "), subp(rest))
    }
    to visitFinalPattern(_, expr, optGuard) {
      if (optGuard != null) {
        return kit.x(subp(expr), kit.text(" :"), subp(optGuard))
      } else {
        return presentENode(expr, context)
      }
    }
    to visitIgnorePattern(_) {
      return kit.text("_")
    }
    to visitListPattern(_, subs) {
      return E.call(kit, "x", [kit.text("[")] + accum [] for sub in subs { _.with(subp(sub)) } + [kit.text("]")])
    }
    to visitSlotPattern(_, expr, optGuard) {
      if (optGuard != null) {
        return kit.x(kit.text("&"), subp(expr), kit.text(" :"), subp(optGuard))
      } else {
        return kit.x(kit.text("&"), subp(expr))
      }
    }
    to visitSuchThatPattern(_, pattern, test) {
      return kit.x(subp(pattern), kit.text(" ? "), subp(test))
    }
    to visitVarPattern(_, expr, optGuard) {
      if (optGuard != null) {
        return kit.x(kit.text("var "), subp(expr), kit.text(" :"), subp(optGuard))
      } else {
        return kit.x(kit.text("var "), subp(expr))
      }
    }
    to visitEScript(_, optMethods, matchers) {
      if (optMethods != null) {
        return block(E.call(kit, "y", accum [] for sub in optMethods + matchers { _.with(subp(sub)) }))
      } else if (matchers =~ [plumber]) {
        return subp(plumber)
      } else {
        presentGeneric(Ref.broken("confused EScript"))
      }
    }
    to visitEMethod(_, docComment, verb, params, optResultGuard, body) {
      # XXX include docComment
      return JPanel`${kit.text("method ")} ${context.subPresent(verb, false)} ${context.subPresent(params, false)}.X ${if (optResultGuard != null) { subp(optResultGuard) } else {JPanel``} }
                    ${JPanel``}.Y ${block(subp(body))}.X.Y`
    }
    to visitEMatcher(_, pattern, body) {
      # XXX include docComment
      return JPanel`${kit.text("match ")} ${subp(pattern)}.X
                    ${JPanel``}.Y         ${block(subp(body))}.X.Y`
    }
    match _ {
      return presentGeneric(node, context)
    }
  })
}

def FlexList := <elib:tables.makeFlexList>.asType()
def FlexSet := <elib:tables.makeFlexSet>.asType()
def UpdatingFlexSet { to coerce(specimen, optEjector) {
  if (try {
        specimen.__getAllegedType().getFQName() 
      } catch p {
        throw.eject(optEjector, p)
      } =~ `@_$$updatingFlexSet`) {
    return specimen
  } else {
    throw.eject(optEjector, "not an UpdatingFlexSet")
  }
} }

def makeDefaultPresenter([=> SimpleMessageCommand,
                          => FlexArgCommand] | _) {
  return def defaultPresenter(object, context) {
    # XXX these tests really shouldn't be coercing in some cases
    return switch (object) {
      match p ? (!Ref.isResolved(p)) {
        presentSwitching(p, context, defaultPresenter) }
      match x :Twine { presentTwine(x, context) }
      match x :List  { presentListY(x, context) }
      match x :Map   { presentMapY(x, context) }
      match x :FlexList { presentFlexList(x, context) }
      match x :any[FlexSet, UpdatingFlexSet] { presentFlexSet(x, context) }
      match x :FinalSlot {
        context.subPresent(x.getValue(), context.quoting()) }

      match s ? (s.__respondsTo("whenUpdated", 2)) { 
        # XXX should have a better way to discriminate
        presentEverReporter(s, context) }
  
      #match x :near ? (x.__respondsTo("paintIcon", 4)) { # XXX better solution needed -- Java interfaces should respond to something like actuallyDeclared to give a restrictive guard
      #  context.kit().text(x) }
        
      # broken - not all lamports hold ZOMs
      #match ls :near ? (ls.__getAllegedType().getFQName() =~ `org.erights.e.elib.slot.makeLamportSlot$$makeLamportSlot__C$$lamportSlot__@{_}__C`) { 
      #  context.kit().getObjectSelectorPresenter()(ls, context) }
      
      # XXX reenable this
      #match c :FlexArgMessageCommand ? ([c.getRecipient(), c.getVerb(), c.getArgZoSlots().size()] == [<elib:tables.makeFlexMap>, "fromTypes", 2]) { 
      #  presentMakeFlexMapCommandInSwing(object, context) }
  
      match c :SimpleMessageCommand { 
        presentSimpleMessageCommand(object, context) }
      match c :FlexArgCommand { 
        presentFACommandInSwing(object, context) }
      match c :Command ? (c.__respondsTo("run", 0)) { 
        presentCompleteCommandInSwing(object, context) }
  
      match n :ENode {
        presentENode(n, context) }
  
      match _ { 
        presentGeneric(object, context) }
    }
  }
}